{"uid":"9280dd88998cc353","name":"test_reaction_post","fullName":"tests.test_post.TestPost#test_reaction_post","historyId":"7eb4de268b9795e4e135f23c2d7fd90a","time":{"start":1670346725257,"stop":1670346725999,"duration":742},"description":"This test checks '/api/v1/threads/discussion/discussion_id/'","descriptionHtml":"<p>This test checks '/api/v1/threads/discussion/discussion_id/'</p>\n","status":"skipped","statusMessage":"XFAIL 401. Problem will be fixed\n\nrequests.exceptions.MissingSchema: Invalid URL '/api/v1/reactions/': No scheme supplied. Perhaps you meant http:///api/v1/reactions/?","statusTrace":"self = <test_post.TestPost object at 0x7f92c0176350>\n\n    @allure.label(\"post\", \"authorization\", \"smoke\")\n    @allure.description(\"This test checks '/api/v1/threads/discussion/discussion_id/'\")\n    @pytest.mark.xfail(reason=\"401. Problem will be fixed\")\n    def test_reaction_post(self):\n        '''Check reactioning a post'''\n        response_create_post = self.action_post()\n        response_create_post_json = self.response_to_json(response_create_post)\n        post_id = response_create_post_json[\"id\"]\n        post_reactions = response_create_post_json[\"reactions\"]\n        post_top_reactions = response_create_post_json[\"top_reactions\"]\n>       response_reaction = self.reaction_action(\n            {\n                \"model_id\": post_id,\n                \"model_type\": \"post\",\n                \"reaction\": \"insightful\",\n            }\n        )\n\ntests/test_post.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/post_case.py:102: in reaction_action\n    response_reaction = requests.post(\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/sessions.py:573: in request\n    prep = self.prepare_request(req)\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = '/api/v1/reactions/'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant http://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL '/api/v1/reactions/': No scheme supplied. Perhaps you meant http:///api/v1/reactions/?\n\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/models.py:439: MissingSchema","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks '/api/v1/threads/discussion/discussion_id/'","status":"skipped","statusMessage":"XFAIL 401. Problem will be fixed\n\nrequests.exceptions.MissingSchema: Invalid URL '/api/v1/reactions/': No scheme supplied. Perhaps you meant http:///api/v1/reactions/?","statusTrace":"self = <test_post.TestPost object at 0x7f92c0176350>\n\n    @allure.label(\"post\", \"authorization\", \"smoke\")\n    @allure.description(\"This test checks '/api/v1/threads/discussion/discussion_id/'\")\n    @pytest.mark.xfail(reason=\"401. Problem will be fixed\")\n    def test_reaction_post(self):\n        '''Check reactioning a post'''\n        response_create_post = self.action_post()\n        response_create_post_json = self.response_to_json(response_create_post)\n        post_id = response_create_post_json[\"id\"]\n        post_reactions = response_create_post_json[\"reactions\"]\n        post_top_reactions = response_create_post_json[\"top_reactions\"]\n>       response_reaction = self.reaction_action(\n            {\n                \"model_id\": post_id,\n                \"model_type\": \"post\",\n                \"reaction\": \"insightful\",\n            }\n        )\n\ntests/test_post.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/post_case.py:102: in reaction_action\n    response_reaction = requests.post(\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/sessions.py:573: in request\n    prep = self.prepare_request(req)\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = '/api/v1/reactions/'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant http://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL '/api/v1/reactions/': No scheme supplied. Perhaps you meant http:///api/v1/reactions/?\n\n/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/requests/models.py:439: MissingSchema","steps":[{"name":"POST request to URL '/api/v1/threads/discussion/'","time":{"start":1670346725257,"stop":1670346725998,"duration":741},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"[Community] Posts"},{"name":"post","value":"authorization"},{"name":"post","value":"smoke"},{"name":"tag","value":"@pytest.mark.xfail(reason='401. Problem will be fixed')"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_post"},{"name":"subSuite","value":"TestPost"},{"name":"host","value":"fv-az424-841"},{"name":"thread","value":"2382-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_post"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["smoke","@pytest.mark.xfail(reason='401. Problem will be fixed')"]},"source":"9280dd88998cc353.json","parameterValues":[]}
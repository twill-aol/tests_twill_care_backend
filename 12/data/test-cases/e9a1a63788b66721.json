{"uid":"e9a1a63788b66721","name":"test_edit_post","fullName":"tests.test_post.TestPost#test_edit_post","historyId":"b033009342de486e62ace34344fcef5a","time":{"start":1670347448995,"stop":1670347449971,"duration":976},"description":"This test checks put:/api/v1/threads/discussion/","descriptionHtml":"<p>This test checks put:/api/v1/threads/discussion/</p>\n","status":"skipped","statusMessage":"XFAIL 401. Problem will be fixed\n\nAssertionError: Unexpected status code! Expected: 201.             Actual: 401","statusTrace":"self = <test_post.TestPost object at 0x7f376fd97400>\n\n    @allure.label(\"post\", \"authorization\", \"smoke\")\n    @allure.description(\"This test checks put:/api/v1/threads/discussion/\")\n    @pytest.mark.xfail(reason=\"401. Problem will be fixed\")\n    def test_edit_post(self):\n        '''Check editing a post'''\n        response_create_post = self.action_post()\n        response_create_post_json = self.response_to_json(response_create_post)\n        new_post_id = response_create_post_json[\"id\"]\n        response_read_post = self.read_post(new_post_id)\n>       response_edit_post = self.action_post(new_post_id)\n\ntests/test_post.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/post_case.py:65: in action_post\n    Assertions.assert_code_status(response_action_post, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [401]>, expected_status_code = 201\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n    \n        assert (\n>           response.status_code == expected_status_code\n        ), f\"Unexpected status code! Expected: {expected_status_code}. \\\n            Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 201.             Actual: 401\n\nlib/assertions.py:47: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks put:/api/v1/threads/discussion/","status":"skipped","statusMessage":"XFAIL 401. Problem will be fixed\n\nAssertionError: Unexpected status code! Expected: 201.             Actual: 401","statusTrace":"self = <test_post.TestPost object at 0x7f376fd97400>\n\n    @allure.label(\"post\", \"authorization\", \"smoke\")\n    @allure.description(\"This test checks put:/api/v1/threads/discussion/\")\n    @pytest.mark.xfail(reason=\"401. Problem will be fixed\")\n    def test_edit_post(self):\n        '''Check editing a post'''\n        response_create_post = self.action_post()\n        response_create_post_json = self.response_to_json(response_create_post)\n        new_post_id = response_create_post_json[\"id\"]\n        response_read_post = self.read_post(new_post_id)\n>       response_edit_post = self.action_post(new_post_id)\n\ntests/test_post.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/post_case.py:65: in action_post\n    Assertions.assert_code_status(response_action_post, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [401]>, expected_status_code = 201\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n    \n        assert (\n>           response.status_code == expected_status_code\n        ), f\"Unexpected status code! Expected: {expected_status_code}. \\\n            Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 201.             Actual: 401\n\nlib/assertions.py:47: AssertionError","steps":[{"name":"POST request to URL '/api/v1/threads/discussion/'","time":{"start":1670347448996,"stop":1670347449478,"duration":482},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"DELETE request to URL '/api/v1/threads/discussion/12814/'","time":{"start":1670347449478,"stop":1670347449688,"duration":210},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"PUT request to URL '/api/v1/threads/discussion/12814'","time":{"start":1670347449688,"stop":1670347449970,"duration":282},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":3},"afterStages":[],"labels":[{"name":"post","value":"smoke"},{"name":"post","value":"authorization"},{"name":"epic","value":"[Community] Posts"},{"name":"tag","value":"@pytest.mark.xfail(reason='401. Problem will be fixed')"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_post"},{"name":"subSuite","value":"TestPost"},{"name":"host","value":"fv-az91-158"},{"name":"thread","value":"2202-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_post"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":2,"passed":0,"unknown":0,"total":2},"items":[{"uid":"a0b3469ca73d680f","reportUrl":"https://twill-aol.github.io/tests_twill_care_backend/11//#testresult/a0b3469ca73d680f","status":"skipped","statusDetails":"XFAIL 401. Problem will be fixed\n\nAssertionError: Unexpected status code! Expected: 201.             Actual: 401","time":{"start":1670346724247,"stop":1670346725220,"duration":973}}]},"tags":["smoke","@pytest.mark.xfail(reason='401. Problem will be fixed')"]},"source":"e9a1a63788b66721.json","parameterValues":[]}